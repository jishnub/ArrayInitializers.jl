var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = ArrayInitializers","category":"page"},{"location":"#ArrayInitializers","page":"Home","title":"ArrayInitializers","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for ArrayInitializers.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [ArrayInitializers]","category":"page"},{"location":"#ArrayInitializers.oneinit","page":"Home","title":"ArrayInitializers.oneinit","text":"oneinit\noneinit(::Type{T})\n\nSingleton instance of oneInitializer{Any}. The instance can be called with a type argument to create a typed one initializer.\n\njulia> Matrix(oneinit(Rational), 3, 6)\n3×6 Matrix{Rational}:\n 1//1  1//1  1//1  1//1  1//1  1//1\n 1//1  1//1  1//1  1//1  1//1  1//1\n 1//1  1//1  1//1  1//1  1//1  1//1\n\njulia> Matrix{Number}(oneinit, 3, 6)\n3×6 Matrix{Number}:\n 1  1  1  1  1  1\n 1  1  1  1  1  1\n 1  1  1  1  1  1\n\n\n\n\n\n","category":"constant"},{"location":"#ArrayInitializers.randinit","page":"Home","title":"ArrayInitializers.randinit","text":"randinit\n\nInitialize array with random values.\n\njulia> Array{UInt8}(randinit, 5)\n5-element Vector{UInt8}:\n 0x91\n 0xcb\n 0xf0\n 0xa5\n 0x9e\n\njulia> Array(randinit(1:3), 5)\n5-element Vector{Int64}:\n 3\n 3\n 2\n 2\n 3\n\njulia> ri = randinit(MersenneTwister(1234), Int8)\nArrayInitializers.RNGArrayInitializer{Int8, Type{Int8}, MersenneTwister}(Int8, MersenneTwister(1234))\n\njulia> Matrix(ri, 2, 3)\n2×3 Matrix{Int8}:\n  -20   75  126\n -105  115  -42\n\n\n\n\n\n","category":"constant"},{"location":"#ArrayInitializers.zeroinit","page":"Home","title":"ArrayInitializers.zeroinit","text":"zeroinit\nzeroinit(::Type{T})\n\nSingleton instance of ZeroInitializer{Any}. The instance can be called with a type argument to create a typed zero initializer.\n\njulia> Vector{Int}(zeroinit, 5)\n5-element Vector{Int64}:\n 0\n 0\n 0\n 0\n 0\n\njulia> Matrix(zeroinit(Rational), 4, 2)\n4×2 Matrix{Rational}:\n 0//1  0//1\n 0//1  0//1\n 0//1  0//1\n 0//1  0//1\n\n\n\n\n\n","category":"constant"},{"location":"#ArrayInitializers.FillArrayInitializer","page":"Home","title":"ArrayInitializers.FillArrayInitializer","text":"FillArrayInitializer{T}(value::T)\n\nWhen passed to an AbstractArray constructor as the first argument, the constructed array will be filled with value via fill!.\n\n\n\n\n\n","category":"type"},{"location":"#ArrayInitializers.OneInitializer","page":"Home","title":"ArrayInitializers.OneInitializer","text":"OneInitializer{T}\n\nWhen passed as the first argument of an AbstractArray constructor, fill the constructed array with ones. This will also add a type to an untyped array.\n\n\n\n\n\n","category":"type"},{"location":"#ArrayInitializers.SizedArrayInitializer","page":"Home","title":"ArrayInitializers.SizedArrayInitializer","text":"SizedArrayInitializer(initializer, dims)\n\nArray initializer with dimensions. Construct using Base.reshape\n\njulia> twos = init(2)\nArrayInitializers.FillArrayInitializer{Int64}(2)\n\njulia> twos_3x5 = reshape(twos, 3, 5)\nArrayInitializers.SizedArrayInitializer{Int64, ArrayInitializers.FillArrayInitializer{Int64}, Tuple{Int64, Int64}}(ArrayInitializers.FillArrayInitializer{Int64}(2), (3, 5))\n\njulia> Array(twos_3x5)\n3×5 Matrix{Int64}:\n 2  2  2  2  2\n 2  2  2  2  2\n 2  2  2  2  2\n\n\n\n\n\n","category":"type"},{"location":"#ArrayInitializers.UndefTypeArrayInitializer","page":"Home","title":"ArrayInitializers.UndefTypeArrayInitializer","text":"UndefTypeArrayInitializer{T}\n\nWhen passed as the first argument of an AbstractArray constructor, confer the type T if the AbstractArray is not typed. The array is not initialized.\n\nSee undeftype\n\n\n\n\n\n","category":"type"},{"location":"#ArrayInitializers.ZeroInitializer","page":"Home","title":"ArrayInitializers.ZeroInitializer","text":"ZeroInitializer{T}\n\nWhen passed as the first argument of an AbstractArray constructor, fill the constructed array with zeros. This will also add a type to an untyped array.\n\n\n\n\n\n","category":"type"},{"location":"#ArrayInitializers.fill!-Tuple{Any}","page":"Home","title":"ArrayInitializers.fill!","text":"ArrayInitializers.fill!(value)\n\nAlias for ArrayInitializers.init.\n\njulia> import ArrayInitializers: fill!\n\njulia> const fives = fill!(5)\nArrayInitializers.FillArrayInitializer{Int64}(5)\n\njulia> Matrix(fives, 5, 9)\n5×9 Matrix{Int64}:\n 5  5  5  5  5  5  5  5  5\n 5  5  5  5  5  5  5  5  5\n 5  5  5  5  5  5  5  5  5\n 5  5  5  5  5  5  5  5  5\n 5  5  5  5  5  5  5  5  5\n\n\n\n\n\n","category":"method"},{"location":"#ArrayInitializers.init-Tuple{T} where T","page":"Home","title":"ArrayInitializers.init","text":"init(value::T)\n\nCreate a FillArrayInitializer{T}.  When passed to an AbstractArray  constructor as the first argument, the constructed array will be filled with value via fill!.\n\nAlso the result can be called with an array argument. It will fill! the array.\n\njulia> const threes = init(3)\nArrayInitializers.FillArrayInitializer{Int64}(3)\n\njulia> Array(threes, 5)\n5-element Vector{Int64}:\n 3\n 3\n 3\n 3\n 3\n\njulia> const fives! = init(5)\nArrayInitializers.FillArrayInitializer{Int64}(5)\n\njulia> fives!(ones(3))\n3-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n\n\n\n\n\n","category":"method"},{"location":"#ArrayInitializers.undeftype-Union{Tuple{Type{T}}, Tuple{T}} where T","page":"Home","title":"ArrayInitializers.undeftype","text":"undeftype(::Type{T})\n\nWhen passed as the first argument of an AbstractArray constructor, confer the type T if the AbstractArray is not typed. The array is not initialized.\n\njulia> Matrix(undeftype(Float64), 3, 6)\n3×6 Matrix{Float64}:\n 1.5e-323      2.0e-323      7.0e-323      2.5e-323      3.5e-323      3.0e-323\n 1.0e-323      1.5e-323      2.0e-323      2.0e-323      2.5e-323      2.5e-323\n 1.13396e-311  6.95272e-310  6.95272e-310  1.13394e-311  6.95272e-310  6.95272e-310\n\njulia> Matrix(undeftype(Number), 3, 6)\n3×6 Matrix{Number}:\n #undef  #undef  #undef  #undef  #undef  #undef\n #undef  #undef  #undef  #undef  #undef  #undef\n #undef  #undef  #undef  #undef  #undef  #undef\n\n\n\n\n\n","category":"method"}]
}
